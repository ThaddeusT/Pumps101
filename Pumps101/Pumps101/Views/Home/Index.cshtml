@model Pumps101.Models.LevelModel

<script type="text/javascript">
    var Resource = { img: {}, sfx: {} }
    var canvas;
    var ctx;
    var width;
    var height;
    var GridSize = 0;
    Resource.img.container = new Image();
    Resource.img.pump = new Image();
    Resource.img.star1 = new Image();
    Resource.img.star2 = new Image();
    Resource.img.star3 = new Image();
    Resource.img.locked = new Image();
    var imagesLoaded = false;
    var columns = 0;
    var rows = 0;
    var centerx = 0;
    var centery = 0;
    var buttonSize =0;
    var level = @Model.Level;

    function drawcanvas() {
        canvas = document.getElementById("canvas");
        ctx = canvas.getContext("2d");
        width = canvas.width;
        height = canvas.height;
        GridSize = Math.round(width * .02);
        rows = Math.round(height / GridSize);
        columns = Math.round(width / GridSize);
        centerx = (columns / 2) * GridSize;
        centery = (rows / 2) * GridSize;
        buttonSize = GridSize * 3;
        if(level != 0)
        {
            drawGrid();
        }
        else
        {
            $("#hpEntry").hide();
            $("#submitButton").hide();
        }

        drawImages();
        drawComponents();
    }

    function drawGrid() {
        ctx.strokeStyle = "rgb(240,240,240)";;
        var i;
        for (i = 0; i < height; i += GridSize) {
            ctx.lineWidth = 1;
            ctx.moveTo(0, i);
            ctx.lineTo(width, i);
            ctx.stroke();
        }
        for (i = 0; i < width; i += GridSize) {
            ctx.lineWidth = 1;
            ctx.moveTo(i, 0);
            ctx.lineTo(i, height);
            ctx.stroke();
        }
    }

    function drawImages() {
        if (imagesLoaded) {
            drawPump();
        }
        else {
            Resource.img.container.onload = function () {
                drawPump();
            };
            Resource.img.pump.src = '@Url.Content("/Content/Images/pump.PNG")';
            Resource.img.container.src ='@Url.Content("/Content/Images/container.PNG")';
            Resource.img.star1.src ='@Url.Content("/Content/Images/1Stars.PNG")';
            Resource.img.star2.src ='@Url.Content("/Content/Images/2Stars.PNG")';
            Resource.img.star3.src ='@Url.Content("/Content/Images/3Stars.PNG")';
            Resource.img.locked.src ='@Url.Content("/Content/Images/Locked.PNG")';
            imagesLoaded = true;
        }
    }

    function drawPump(){
        switch(level)
        {
            case 1: ctx.drawImage(Resource.img.pump, ((columns / 2)-2) * GridSize, ((rows / 2)-1)*GridSize, GridSize * 3, GridSize * 3);
                break;
            case 2: ctx.drawImage(Resource.img.pump, ((columns / 2)-2) * GridSize, ((rows / 2)+2)*GridSize, GridSize * 3, GridSize * 3);
                break;
        }
    }

    function drawComponents()
    {
        if(level !=0)
        {
            ctx.fillStyle = 'red';
            ctx.font = '16pt Arial'
            ctx.textAlign = 'center';
            ctx.fillText('Level '+level, cwidth / 2, GridSize*2);

            ctx.fillStyle ='black';
            ctx.font = '10pt Arial';
            ctx.textAlign = 'center';
            ctx.fillText('Time to Move All Liquid: @Model.Time Hours', (cwidth / 2), GridSize*3);
            ctx.fillText('Diameter of Pipes: @Model.Diameter inches', (cwidth / 2), GridSize*4);
            ctx.fillText('Volume of Containers: @Model.Volume ft^3', (cwidth / 2), GridSize*5);
            ctx.fillText('Liquid Density: @Model.Density lbm/ft^3', (cwidth / 2), GridSize*6);
        }

        switch(level)
        {
            case 0:
                drawSelectButtons();
                break;

            case 1:
                ctx.strokeStyle = "black";

                ctx.beginPath();
                var x = ((columns / 2)+1) * GridSize;
                var xright = x+(Math.round(columns / 4) * GridSize);
                var y = (((rows / 2))*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xright, y);
                ctx.stroke();

                ctx.beginPath();
                x = ((columns / 2)+1) * GridSize;
                y = (((rows / 2))*GridSize)+(.5*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xright, y);
                ctx.stroke();

                var x = ((columns / 2)-2) * GridSize;
                var xleft = x-((Math.round(columns / 4)) * GridSize);
                var y = (((rows / 2))*GridSize);
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(xleft, y);
                ctx.stroke();

                ctx.beginPath();
                x = ((columns / 2)-2) * GridSize;
                y = (((rows / 2))*GridSize)+(.5*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xleft, y);
                ctx.stroke();

                leftContainerX = xleft-(3*GridSize);
                ContainerY = (y-(.5*GridSize)) - (2*GridSize);
                rightContainerX = xright;

                ctx.drawImage(Resource.img.container, leftContainerX, ContainerY, GridSize * 3, GridSize * 3);
                ctx.rect(leftContainerX, ContainerY, GridSize * 3, GridSize * 3);
                ctx.stroke();
                ctx.drawImage(Resource.img.container, rightContainerX, ContainerY, GridSize * 3, GridSize * 3);
                ctx.rect(rightContainerX, ContainerY, GridSize * 3, GridSize * 3);
                ctx.stroke();

                $("#hpEntry").css("top", ((rows / 2)-3)*GridSize+"px");
                $("#hpEntry").css("left", ((columns / 2)-3) * GridSize+"px");
                $("#HPGuess").css("width", 2*GridSize+"px");
                $("#HPGuess").css("font-size", "x-small");
                $("#hpEntry label").css("font-size", "x-small");

                break;

            case 2:

                ctx.strokeStyle = "black";

                //Draw pipes and container to the right of the pump

                ctx.beginPath();
                var x = ((columns / 2)+1) * GridSize;
                var xright = x+(Math.round(columns / 6) * GridSize);
                var y = (((rows / 2)+3)*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xright, y);
                ctx.stroke();

                ctx.beginPath();
                x = ((columns / 2)+1) * GridSize;
                y = (((rows / 2)+3)*GridSize)+(.5*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xright+(.5*GridSize), y);
                ctx.stroke();

                rightContainerX = xright - (1.5*GridSize);
                rightContainerY = y - (GridSize*10);

                ctx.drawImage(Resource.img.container, rightContainerX, rightContainerY, GridSize * 3, GridSize * 3);
                ctx.rect(rightContainerX, rightContainerY, GridSize * 3, GridSize * 3);
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xright+(.5*GridSize), y);
                ctx.lineTo(xright+(.5*GridSize), y-(GridSize*7));
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xright, y-(.5*GridSize));
                ctx.lineTo(xright, y-(.5*GridSize)-(GridSize*6.5));
                ctx.stroke();

                //Draw pipes and container to the left of the pump
                var x = ((columns / 2)-2) * GridSize;
                var xleft = x-((Math.round(columns / 6)) * GridSize);
                var y = (((rows / 2)+3)*GridSize);
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(xleft, y);
                ctx.stroke();

                ctx.beginPath();
                x = ((columns / 2)-2) * GridSize;
                y = (((rows / 2)+3)*GridSize)+(.5*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xleft-(.5*GridSize), y);
                ctx.stroke();

                leftContainerX = xleft - (1.5*GridSize);
                leftContainerY = y - (GridSize*6);

                ctx.drawImage(Resource.img.container, leftContainerX, leftContainerY, GridSize * 3, GridSize * 3);
                ctx.rect(leftContainerX, leftContainerY, GridSize * 3, GridSize * 3);
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xleft-(.5*GridSize), y);
                ctx.lineTo(xleft-(.5*GridSize), y - (GridSize*3));
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xleft, y - (.5*GridSize));
                ctx.lineTo(xleft, y - (GridSize*3));
                ctx.stroke();

                ctx.fillStyle ='black';
                ctx.font = '10pt Arial';
                ctx.textAlign = 'right';
                ctx.fillText('Height: @Model.TankOneElevation ft', xleft-(GridSize*1), y - (GridSize*2));
                ctx.fillText('Height: @Model.TankTwoElevation ft', xright+(GridSize*3.5), rightContainerY+(GridSize*5));

                $("#hpEntry").css("top", ((rows / 2))*GridSize+"px");
                $("#hpEntry").css("left", ((columns / 2)-3) * GridSize+"px");
                $("#HPGuess").css("width", 2*GridSize+"px");
                $("#HPGuess").css("font-size", "x-small");
                $("#hpEntry label").css("font-size", "x-small");
                break;

            case 3:

                ctx.strokeStyle = "black";

                //Draw pipes and container to the right of the pump

                ctx.beginPath();
                var x = ((columns / 2)+1) * GridSize;
                var xright = x+(Math.round(columns / 6) * GridSize);
                var y = (((rows / 2)+3)*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xright, y);
                ctx.stroke();

                ctx.beginPath();
                x = ((columns / 2)+1) * GridSize;
                y = (((rows / 2)+3)*GridSize)+(.5*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xright+(.5*GridSize), y);
                ctx.stroke();

                rightContainerX = xright - (1.5*GridSize);
                rightContainerY = y - (GridSize*10);

                ctx.drawImage(Resource.img.container, rightContainerX, rightContainerY, GridSize * 3, GridSize * 3);
                ctx.rect(rightContainerX, rightContainerY, GridSize * 3, GridSize * 3);
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xright+(.5*GridSize), y);
                ctx.lineTo(xright+(.5*GridSize), y-(GridSize*7));
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xright, y-(.5*GridSize));
                ctx.lineTo(xright, y-(.5*GridSize)-(GridSize*6.5));
                ctx.stroke();

                //Draw pipes and container to the left of the pump
                var x = ((columns / 2)-2) * GridSize;
                var xleft = x-((Math.round(columns / 6)) * GridSize);
                var y = (((rows / 2)+3)*GridSize);
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(xleft, y);
                ctx.stroke();

                ctx.beginPath();
                x = ((columns / 2)-2) * GridSize;
                y = (((rows / 2)+3)*GridSize)+(.5*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xleft-(.5*GridSize), y);
                ctx.stroke();

                leftContainerX = xleft - (1.5*GridSize);
                leftContainerY = y - (GridSize*6);

                ctx.drawImage(Resource.img.container, leftContainerX, leftContainerY, GridSize * 3, GridSize * 3);
                ctx.rect(leftContainerX, leftContainerY, GridSize * 3, GridSize * 3);
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xleft-(.5*GridSize), y);
                ctx.lineTo(xleft-(.5*GridSize), y - (GridSize*3));
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xleft, y - (.5*GridSize));
                ctx.lineTo(xleft, y - (GridSize*3));
                ctx.stroke();

                ctx.fillStyle ='black';
                ctx.font = '10pt Arial';
                ctx.textAlign = 'right';
                ctx.fillText('Height: @Model.TankOneElevation ft', xleft-(GridSize*1), y - (GridSize*2));
                ctx.fillText('Height: @Model.TankTwoElevation ft', xright+(GridSize*3.5), rightContainerY+(GridSize*5));
                ctx.fillText('Pressure: @Model.TankOnePressure lbm/ft^3', leftContainerX-GridSize, (leftContainerY+(buttonSize*.5)));
                ctx.fillText('Pressure: @Model.TankTwoPressure lbm/ft^3', rightContainerX+buttonSize+GridSize, (rightContainerY+(buttonSize*.5)));


                $("#hpEntry").css("top", ((rows / 2))*GridSize+"px");
                $("#hpEntry").css("left", ((columns / 2)-3) * GridSize+"px");
                $("#HPGuess").css("width", 2*GridSize+"px");
                $("#HPGuess").css("font-size", "x-small");
                $("#hpEntry label").css("font-size", "x-small");
                break;
        }
    }

    function submitPage()
    {
        alert($("#HPGuess").val());
        $.getJSON('@Url.Action("SubmitLevel","Home")', { levelId: $("#LevelId").val(), HPGuess: $("#HPGuess").val()},
            function(data) {
                alert(data.message);
                alert(data.star);
                alert(data.max);
                console.log(data.max);
                if(data.star != 0)
                {
                    var video = document.getElementsByTagName('video')[0];
                    var sources = video.getElementsByTagName('source');
                    sources[0].src = '@Url.Content("/Content/Video/YouWin1.mp4")';
                    video.load();
                    $("#gameresult").show();
                    $("#videoresult").get(0).play();
                }
                else{
                    if(data.max==true)
                    {
                        $("#gameresult").show();
                        $("#videoresult").get(0).play();
                    }
                }
            }
        );

    }

    function levelselectPage(){
        window.location.href = '@Url.Action("Index","Home",new{level = 0})';
    }
</script>

    @if (Model.LevelsCompleted != null)
    {
        <script type="text/javascript">
    function drawSelectButtons()
    {
        ctx.fillStyle = 'white';
        ctx.rect(0, 0, width, height);
        ctx.fill();

        ctx.strokeStyle = "black";
        ctx.fillStyle = 'red';
        ctx.font = '10pt Arial'
        ctx.textAlign = 'center';

        var buttonstoprowy = centery - ((rows/3)*GridSize);
        var buttonsleftx =  centerx - (5.5*GridSize);

        @if(Model.LevelsCompleted.Levels[0].Locked)
        {
            @:ctx.drawImage(Resource.img.locked, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                                        }
        else if (Model.LevelsCompleted.Levels[0].Stars == 0)
        {
            @:ctx.drawImage(Resource.img.pump, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                                        }
        else if (Model.LevelsCompleted.Levels[0].Stars == 1)
        {
            @:ctx.drawImage(Resource.img.star1, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                                        }
        else if (Model.LevelsCompleted.Levels[0].Stars == 2)
        {
            @:ctx.drawImage(Resource.img.star2, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                                        }
        else if (Model.LevelsCompleted.Levels[0].Stars == 3)
        {
            @:ctx.drawImage(Resource.img.star3, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                                        }
        ctx.rect(buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
        ctx.stroke();
        ctx.fillText('Level @Model.LevelsCompleted.Levels[0].LevelNum', buttonsleftx+(GridSize * 1.5), buttonstoprowy+(GridSize * 1));

        @if(Model.LevelsCompleted.Levels[1].Locked)
        {
            @:ctx.drawImage(Resource.img.locked, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                                                                }
        else if (Model.LevelsCompleted.Levels[1].Stars == 0)
        {
            @:ctx.drawImage(Resource.img.pump, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                                                                }
        else if (Model.LevelsCompleted.Levels[1].Stars == 1)
        {
            @:ctx.drawImage(Resource.img.star1, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                                                        }
        else if (Model.LevelsCompleted.Levels[1].Stars == 2)
        {
            @:ctx.drawImage(Resource.img.star2, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                                                }
        else if (Model.LevelsCompleted.Levels[1].Stars == 3)
        {
            @:ctx.drawImage(Resource.img.star3, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                                        }
        ctx.rect(buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
        ctx.stroke();
        ctx.fillText('Level @Model.LevelsCompleted.Levels[1].LevelNum', buttonsleftx+(GridSize * 5.5), buttonstoprowy+(GridSize * 1));

        @if(Model.LevelsCompleted.Levels[2].Locked)
        {
            @:ctx.drawImage(Resource.img.locked, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                                }
        else if (Model.LevelsCompleted.Levels[2].Stars == 0)
        {
            @:ctx.drawImage(Resource.img.pump, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                                }
        else if (Model.LevelsCompleted.Levels[2].Stars == 1)
        {
            @:ctx.drawImage(Resource.img.star1, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                                }
        else if (Model.LevelsCompleted.Levels[2].Stars == 2)
        {
            @:ctx.drawImage(Resource.img.star2, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                                }
        else if (Model.LevelsCompleted.Levels[2].Stars == 3)
        {
            @:ctx.drawImage(Resource.img.star3, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                                }
        ctx.rect(buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
        ctx.stroke();
        ctx.fillText('Level @Model.LevelsCompleted.Levels[2].LevelNum', buttonsleftx+(GridSize * 9.5), buttonstoprowy+(GridSize * 1));

        buttonstoprowy = buttonstoprowy + (GridSize * 4);


        @if(Model.LevelsCompleted.Levels[3].Locked)
        {
            @:ctx.drawImage(Resource.img.locked, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[3].Stars == 0)
        {
            @:ctx.drawImage(Resource.img.pump, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[3].Stars == 1)
        {
            @:ctx.drawImage(Resource.img.star1, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[3].Stars == 2)
        {
            @:ctx.drawImage(Resource.img.star2, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[3].Stars == 3)
        {
            @:ctx.drawImage(Resource.img.star3, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                        }
        ctx.rect(buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
        ctx.stroke();
        ctx.fillText('Level @Model.LevelsCompleted.Levels[3].LevelNum', buttonsleftx+(GridSize * 1.5), buttonstoprowy+(GridSize * 1));

        @if(Model.LevelsCompleted.Levels[4].Locked)
        {
            @:ctx.drawImage(Resource.img.locked, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[4].Stars == 0)
        {
            @:ctx.drawImage(Resource.img.pump, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[4].Stars == 1)
        {
            @:ctx.drawImage(Resource.img.star1, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[4].Stars == 2)
        {
            @:ctx.drawImage(Resource.img.star2, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[4].Stars == 3)
        {
            @:ctx.drawImage(Resource.img.star3, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                        }
        ctx.rect(buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
        ctx.stroke();
        ctx.fillText('Level @Model.LevelsCompleted.Levels[4].LevelNum', buttonsleftx+(GridSize * 5.5), buttonstoprowy+(GridSize * 1));

        @if(Model.LevelsCompleted.Levels[5].Locked)
        {
            @:ctx.drawImage(Resource.img.locked, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[5].Stars == 0)
        {
            @:ctx.drawImage(Resource.img.pump, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[5].Stars == 1)
        {
            @:ctx.drawImage(Resource.img.star1, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[5].Stars == 2)
        {
            @:ctx.drawImage(Resource.img.star2, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[5].Stars == 3)
        {
            @:ctx.drawImage(Resource.img.star3, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                        }
        ctx.rect(buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
        ctx.stroke();
        ctx.fillText('Level @Model.LevelsCompleted.Levels[5].LevelNum', buttonsleftx+(GridSize * 9.5), buttonstoprowy+(GridSize * 1));

        buttonstoprowy = buttonstoprowy + (GridSize * 4);

        @if(Model.LevelsCompleted.Levels[6].Locked)
        {
            @:ctx.drawImage(Resource.img.locked, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[6].Stars == 0)
        {
            @:ctx.drawImage(Resource.img.pump, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[6].Stars == 1)
        {
            @:ctx.drawImage(Resource.img.star1, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[6].Stars == 2)
        {
            @:ctx.drawImage(Resource.img.star2, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[6].Stars == 3)
        {
            @:ctx.drawImage(Resource.img.star3, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                        }
        ctx.rect(buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
        ctx.stroke();
        ctx.fillText('Level @Model.LevelsCompleted.Levels[6].LevelNum', buttonsleftx+(GridSize * 1.5), buttonstoprowy+(GridSize * 1));

        @if(Model.LevelsCompleted.Levels[7].Locked)
        {
            @:ctx.drawImage(Resource.img.locked, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                }
        else if (Model.LevelsCompleted.Levels[7].Stars == 0)
        {
            @:ctx.drawImage(Resource.img.pump, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                }
        else if (Model.LevelsCompleted.Levels[7].Stars == 1)
        {
            @:ctx.drawImage(Resource.img.star1, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                }
        else if (Model.LevelsCompleted.Levels[7].Stars == 2)
        {
            @:ctx.drawImage(Resource.img.star2, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                }
        else if (Model.LevelsCompleted.Levels[7].Stars == 3)
        {
            @:ctx.drawImage(Resource.img.star3, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                }
        ctx.rect(buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
        ctx.stroke();
        ctx.fillText('Level @Model.LevelsCompleted.Levels[7].LevelNum', buttonsleftx+(GridSize * 5.5), buttonstoprowy+(GridSize * 1));

        @if(Model.LevelsCompleted.Levels[8].Locked)
        {
            @:ctx.drawImage(Resource.img.locked, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                }
        else if (Model.LevelsCompleted.Levels[8].Stars == 0)
        {
            @:ctx.drawImage(Resource.img.pump, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                }
        else if (Model.LevelsCompleted.Levels[8].Stars == 1)
        {
            @:ctx.drawImage(Resource.img.star1, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                }
        else if (Model.LevelsCompleted.Levels[8].Stars == 2)
        {
            @:ctx.drawImage(Resource.img.star2, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                }
        else if (Model.LevelsCompleted.Levels[8].Stars == 3)
        {
            @:ctx.drawImage(Resource.img.star3, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                }
        ctx.rect(buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
        ctx.stroke();
        ctx.fillText('Level @Model.LevelsCompleted.Levels[8].LevelNum', buttonsleftx+(GridSize * 9.5), buttonstoprowy+(GridSize * 1));
    }
    function getLevel(x,y)
    {
        var firstButtonMinX = (centerx - (5.5*GridSize));
        var firstButtonMinY = centery - ((rows/3)*GridSize);
        var firstButtonMaxX = (firstButtonMinX+buttonSize);
        var firstButtonMaxY = (firstButtonMinY+buttonSize);
        var secondButtonMinX = (firstButtonMaxX+GridSize);
        var secondButtonMaxX = secondButtonMinX + buttonSize;
        var thirdButtonMinX = (secondButtonMaxX+GridSize);
        var thirdButtonMaxX= thirdButtonMinX + buttonSize;
        var fourthButtonMinX= firstButtonMinX;
        var fourthButtonMaxX = (fourthButtonMinX+ buttonSize);
        var fourthButtonMinY = (firstButtonMaxY+GridSize);
        var fourthButtonMaxY = (fourthButtonMinY+ buttonSize);
        var fifthButtonMinX = (fourthButtonMaxX + GridSize);
        var fifthButtonMaxX = (fifthButtonMinX + buttonSize);
        var sixthButtonMinX = (fifthButtonMaxX + GridSize);
        var sixthButtonMaxX = (sixthButtonMinX + buttonSize);
        var seventhButtonMinY = (fourthButtonMaxY+GridSize);
        var seventhButtonMaxY = (seventhButtonMinY + buttonSize);
        var seventhButtonMinX= fourthButtonMinX;
        var seventhButtonMaxX = (seventhButtonMinX+ buttonSize);
        var eighthButtonMinX = (seventhButtonMaxX + GridSize);
        var eighthButtonMaxX = (eighthButtonMinX + buttonSize);
        var ninthButtonMinX = (eighthButtonMaxX + GridSize);
        var ninthButtonMaxX = (ninthButtonMinX + buttonSize);

        console.log(x+','+y);
        if(x>firstButtonMinX && x<thirdButtonMaxX && y>firstButtonMinY && y < firstButtonMaxY)
        {
            if(x < firstButtonMaxX && y<firstButtonMaxY)
            {
                @if(!Model.LevelsCompleted.Levels[0].Locked)
                        {
                            @:window.location.href = '@Url.Action("Index","Home",new{level = 1})';
                                        }
            }
            if(x > secondButtonMinX && x < secondButtonMaxX &&  y<firstButtonMaxY)
            {
                @if(!Model.LevelsCompleted.Levels[1].Locked)
                        {
                            @:window.location.href = '@Url.Action("Index","Home",new{level = 2})';
                                        }
            }
            if(x > thirdButtonMinX && x < thirdButtonMaxX &&  y<firstButtonMaxY)
            {
                @if(!Model.LevelsCompleted.Levels[2].Locked)
                {
                    @:window.location.href = '@Url.Action("Index","Home",new{level = 3})';
                }
            }
        }
        if(x>fourthButtonMinX && x<thirdButtonMaxX &&  y > fourthButtonMinY && y < fourthButtonMaxY)
        {
            if(x>fourthButtonMinX && x<fourthButtonMaxX)
            {
                @if(!Model.LevelsCompleted.Levels[3].Locked)
                {
                    @:window.location.href = '@Url.Action("Index","Home",new{level = 4})';
                }
            }
            if(x>fifthButtonMinX && x<fifthButtonMaxX)
            {
                @if(!Model.LevelsCompleted.Levels[4].Locked)
                {
                    @:window.location.href = '@Url.Action("Index","Home",new{level = 5})';
                }
            }
            if(x>sixthButtonMinX && x<sixthButtonMaxX)
            {
                @if(!Model.LevelsCompleted.Levels[5].Locked)
                {
                    @:window.location.href = '@Url.Action("Index","Home",new{level = 6})';
                }
            }
        }
        if(x>seventhButtonMinX && x<ninthButtonMaxX && y >seventhButtonMinY && y<seventhButtonMaxY)
        {
            if(x>seventhButtonMinX && x<seventhButtonMaxX)
            {
                @if(!Model.LevelsCompleted.Levels[6].Locked)
                {
                    @:window.location.href = '@Url.Action("Index","Home",new{level = 7})';
                }
            }
            if(x>eighthButtonMinX && x<eighthButtonMaxX)
            {
                @if(!Model.LevelsCompleted.Levels[7].Locked)
                {
                    @:window.location.href = '@Url.Action("Index","Home",new{level = 8})';
                }
            }
            if(x>ninthButtonMinX && x<ninthButtonMaxX)
            {
                @if(!Model.LevelsCompleted.Levels[8].Locked)
                {
                    @:window.location.href = '@Url.Action("Index","Home",new{level = 9})';
                }
            }
        }

    }

    </script>
    }
    <canvas id="canvas">
        HTML5 Canvas not supported.
    </canvas>
    <table id="hpEntry">
    <tr>
        <td>@Html.LabelFor(m => m.HPGuess)</td>
        <td>@Html.TextBoxFor(m => m.HPGuess)</td>
    </tr>
</table>
    <menu id="controls">
        <input type="submit" id="returnButton" value="Return to Level Select" onclick="levelselectPage()" />
        <input type="submit" id="submitButton" value="Submit Answer" onclick="submitPage()" />
    </menu>
<div id="fix">&copy; @DateTime.Now.Year - Pumps101</div>
@Html.HiddenFor(m => m.LevelId)
@Html.Hidden("redirect", Url.Action("Index", "Home", new { level = 0 }))
<div id="gameresult">
    <video class="video" id="videoresult">
        <source id="src" src="@Url.Content("/Content/Video/YouLose1.mp4")" type="video/mp4" />
    </video>
    <div class="centeredtext">
        <div id="response">
        </div>
    </div>
</div>