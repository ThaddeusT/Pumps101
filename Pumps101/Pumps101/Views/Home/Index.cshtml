@model Pumps101.Models.LevelModel

<script type="text/javascript">
    var Resource = { img: {}, sfx: {} }
    var canvas;
    var ctx;
    var width;
    var height;
    var GridSize = 0;
    Resource.img.container = new Image();
    Resource.img.pump = new Image();
    Resource.img.valve = new Image();
    Resource.img.star1 = new Image();
    Resource.img.star2 = new Image();
    Resource.img.star3 = new Image();
    Resource.img.locked = new Image();
    Resource.img.Lose = new Image();
    Resource.img.Win = new Image();
    Resource.img.Lvl1Equations = new Image();
    Resource.img.Lvl2Equations = new Image();
    Resource.img.Lvl3Equations = new Image();
    Resource.img.Lvl4Equations = new Image();
    Resource.img.Lvl5Equations = new Image();
    Resource.img.Lvl6Equations = new Image();
    Resource.img.Lvl7Equations = new Image();
    Resource.img.Lvl8Equations = new Image();
    Resource.img.Lvl9Equations = new Image();
    Resource.img.Lvl5Tables = new Image();
    Resource.img.Lvl6Tables = new Image();
    Resource.img.Lvl7Tables = new Image();
    Resource.img.Lvl8Tables = new Image();
    Resource.img.Lvl9TablesP1 = new Image();
    Resource.img.Lvl9TablesP2 = new Image();
    Resource.img.star = new Image();

    var imagesLoaded = false;
    var columns = 0;
    var rows = 0;
    var centerx = 0;
    var centery = 0;
    var buttonSize =0;
    var level = @Model.Level;
    var showingEquations = false;
    var canvas;
    var ctx;
    var width;
    var height;
    var GridSize;
    var rows;
    var columns;
    var centerx;
    var centery;
    var buttonSize;

    function openEquations()
    {
        setVariables();
        if(!showingEquations)
        {
            showingEquations = true;
            ctx.clearRect ( 0 , 0 , width , height );
            switch(level)
            {
                case 1:
                    ctx.drawImage(Resource.img.Lvl1Equations, centerx -((width/2)/2), centery -((height/2)/2), (width/2), (height/2));
                    break;
                case 2:
                    ctx.drawImage(Resource.img.Lvl2Equations, centerx -((width/2)/2), centery -((height/2)/2), (width/2), (height/2));
                    break;
                case 3:
                    ctx.drawImage(Resource.img.Lvl3Equations, centerx -((width/2)/2), centery -((height/2)/2), (width/2), (height/2));
                    break;
                case 4:
                    ctx.drawImage(Resource.img.Lvl4Equations, centerx -((width/2)/2), centery -((height/2)/2), (width/2), (height/2));
                    break;
                case 5:
                    ctx.drawImage(Resource.img.Lvl5Equations, GridSize, (height/4), (width/2)-(GridSize), (height/2));
                    ctx.drawImage(Resource.img.Lvl5Tables,(width/2)+GridSize, (height/4), (width/2)-(GridSize*2), (height/2));
                    break;
                case 6:
                    ctx.drawImage(Resource.img.Lvl6Equations, GridSize, (height/4), (width/2)-(GridSize), (height/2));
                    ctx.drawImage(Resource.img.Lvl6Tables,(width/2)+GridSize, (height/4), (width/2)-(GridSize*2), (height/2));
                    break;
                case 7:
                    ctx.drawImage(Resource.img.Lvl7quations, GridSize, (height/4), (width/2)-(GridSize), (height/2));
                    ctx.drawImage(Resource.img.Lvl7Tables,(width/2)+GridSize, (height/4), (width/2)-(GridSize*2), (height/2));
                    break;
                case 8:
                    ctx.drawImage(Resource.img.Lvl8Equations, GridSize, (height/4), (width/2)-(GridSize), (height/2));
                    ctx.drawImage(Resource.img.Lvl8Tables,(width/2)+GridSize, (height/4), (width/2)-(GridSize*2), (height/2));
                    break;
                case 9:
                    ctx.drawImage(Resource.img.Lvl9Equations, GridSize, (height/8), (width/2)-(GridSize), (height/2));
                    ctx.drawImage(Resource.img.Lvl9TablesP1,0,0,468,478,(width/2)+GridSize, (height/8), (width/2)-(GridSize*4), (height/2));
                    ctx.drawImage(Resource.img.Lvl9TablesP2,0,0,277,292,(width/2)+GridSize, (height/8)+(height/2), (width/2)-(GridSize*5), (height/3));
                    break;

            }
            $("#equationsButton").val("Return to Level");
            $("#hpEntry").hide();
            $("#submitButton").hide();
            $("#returnButton").hide();
            $("#logoutButton").hide();
        }
        else{
            showingEquations = false;
            drawcanvas();
            $("#equationsButton").val("Show Equations/Tables");
            $("#hpEntry").show();
            $("#submitButton").show();
            $("#returnButton").show();
            $("#logoutButton").show();
        }
    }

    function setVariables()
    {
        canvas = document.getElementById("canvas");
        ctx = canvas.getContext("2d");
        width = canvas.width;
        height = canvas.height;
        GridSize = Math.round(width * .02);
        rows = Math.round(height / GridSize);
        columns = Math.round(width / GridSize);
        centerx = (columns / 2) * GridSize;
        centery = (rows / 2) * GridSize;
        buttonSize = GridSize * 3;
    }

    function drawResponse(success, max, message, stars){
        console.log("Drawing Response");
        //setVariables();
        //ctx.clearRect ( 0 , 0 , width , height );
        $("#equationsButton").hide();
        $("#hpEntry").hide();
        $("#submitButton").hide();
        $("#returnButton").hide();
        $("#logoutButton").hide();
        if(success)
        {
            ctx.drawImage(Resource.img.Win, 0, 0, width, height);
            if(stars==1)
            {
                ctx.drawImage(Resource.img.star, 0, 70, 120, 120, centerx-(buttonSize/2),height-(GridSize*3), buttonSize, buttonSize);
            }
            else if(stars == 2)
            {
                ctx.drawImage(Resource.img.star, 0, 70, 120, 120, centerx-(buttonSize/2)-(buttonSize),height-(GridSize*3), buttonSize, buttonSize);
                ctx.drawImage(Resource.img.star, 0, 70, 120, 120, centerx-(buttonSize/2),height-(GridSize*3), buttonSize, buttonSize);
            }
            else if(stars == 3)
            {
                ctx.drawImage(Resource.img.star, 0, 70, 120, 120, centerx-(buttonSize/2)-(buttonSize),height-(GridSize*3), buttonSize, buttonSize);
                ctx.drawImage(Resource.img.star, 0, 70, 120, 120, centerx-(buttonSize/2),height-(GridSize*3), buttonSize, buttonSize);
                ctx.drawImage(Resource.img.star, 0, 70, 120, 120, centerx-(buttonSize/2)+(buttonSize),height-(GridSize*3), buttonSize, buttonSize);
            }
            setTimeout(function(){ window.location.href = '@Url.Action("Index","Home",new{level = 0})'; }, 3000);
        }
        else if(max)
        {
            ctx.drawImage(Resource.img.Lose, 0, 0, width, height);
            setTimeout(function(){ window.location.href = '@Url.Action("Index","Home",new{level = 0})'; }, 3000);
        }
        else{
            ctx.fillStyle = 'red';
            ctx.font = '72pt Arial'
            ctx.textAlign = 'center';
            ctx.fillText(message, width / 2, height /2);

            setTimeout(function(){ drawcanvas(); }, 3000);
        }

    }

    function drawcanvas() {
        setVariables();
        ctx.clearRect ( 0 , 0 , width , height );
        if(level != 0)
        {
            drawGrid();
            $("#equationsButton").show();
            $("#hpEntry").show();
            $("#submitButton").show();
            $("#returnButton").show();
            $("#logoutButton").show();
        }
        else
        {
            $("#hpEntry").hide();
            $("#submitButton").hide();
            $("#returnButton").hide();
            $("#equationsButton").hide();
        }
        loadImages();
        drawPump();
        drawComponents();
    }

    function drawGrid() {
        ctx.strokeStyle = "rgb(240,240,240)";;
        var i;
        for (i = 0; i < height; i += GridSize) {
            ctx.lineWidth = 1;
            ctx.moveTo(0, i);
            ctx.lineTo(width, i);
            ctx.stroke();
        }
        for (i = 0; i < width; i += GridSize) {
            ctx.lineWidth = 1;
            ctx.moveTo(i, 0);
            ctx.lineTo(i, height);
            ctx.stroke();
        }
    }

    function loadImages() {
        if (imagesLoaded) {
        }
        else {
            Resource.img.container.onload = function () {
                drawPump();
            };
            Resource.img.pump.src = '@Url.Content("/Content/Images/pump.PNG")';
            Resource.img.container.src ='@Url.Content("/Content/Images/container.PNG")';
            Resource.img.valve.src = '@Url.Content("/Content/Images/Valve.PNG")';
            Resource.img.star1.src ='@Url.Content("/Content/Images/1Stars.PNG")';
            Resource.img.star2.src ='@Url.Content("/Content/Images/2Stars.PNG")';
            Resource.img.star3.src ='@Url.Content("/Content/Images/3Stars.PNG")';
            Resource.img.locked.src ='@Url.Content("/Content/Images/Locked.PNG")';
            Resource.img.Lose.src = '@Url.Content("/Content/Images/Lose.PNG")';
            Resource.img.Win.src = '@Url.Content("/Content/Images/Win.PNG")';
            Resource.img.Lvl1Equations.src = '@Url.Content("/Content/Images/Lvl1Equations.PNG")';
            Resource.img.Lvl2Equations.src = '@Url.Content("/Content/Images/Lvl2Equations.PNG")';
            Resource.img.Lvl3Equations.src = '@Url.Content("/Content/Images/Lvl3Equations.PNG")';
            Resource.img.Lvl4Equations.src = '@Url.Content("/Content/Images/Lvl4Equations.PNG")';
            Resource.img.Lvl5Equations.src = '@Url.Content("/Content/Images/Lvl5Equations.PNG")';
            Resource.img.Lvl6Equations.src = '@Url.Content("/Content/Images/Lvl6Equations.PNG")';
            Resource.img.Lvl7Equations.src = '@Url.Content("/Content/Images/Lvl7Equations.PNG")';
            Resource.img.Lvl8Equations.src = '@Url.Content("/Content/Images/Lvl8Equations.PNG")';
            Resource.img.Lvl9Equations.src = '@Url.Content("/Content/Images/Lvl9Equations.PNG")';
            Resource.img.Lvl5Tables.src = '@Url.Content("/Content/Images/Lvl5Tables.PNG")';
            Resource.img.Lvl6Tables.src = '@Url.Content("/Content/Images/Lvl6Tables.PNG")';
            Resource.img.Lvl7Tables.src = '@Url.Content("/Content/Images/Lvl7Tables.PNG")';
            Resource.img.Lvl8Tables.src = '@Url.Content("/Content/Images/Lvl8Tables.PNG")';
            Resource.img.Lvl9TablesP1.src = '@Url.Content("/Content/Images/Lvl9TablesP1.PNG")';
            Resource.img.Lvl9TablesP2.src = '@Url.Content("/Content/Images/Lvl9TablesP2.PNG")';
            Resource.img.star.src = '@Url.Content("/Content/Images/star-rating.png")';

            imagesLoaded = true;
        }
    }

    function drawPump(){
        switch(level)
        {
            case 1: ctx.drawImage(Resource.img.pump, ((columns / 2)-2) * GridSize, ((rows / 2)-1)*GridSize, GridSize * 3, GridSize * 3);
                break;
            case 2: ctx.drawImage(Resource.img.pump, ((columns / 2)-2) * GridSize, ((rows / 2)+2)*GridSize, GridSize * 3, GridSize * 3);
                break;
            case 3: ctx.drawImage(Resource.img.pump, ((columns / 2)-2) * GridSize, ((rows / 2)+2)*GridSize, GridSize * 3, GridSize * 3);
                break;
            case 4: ctx.drawImage(Resource.img.pump, ((columns / 2)-2) * GridSize, ((rows / 2)+2)*GridSize, GridSize * 3, GridSize * 3);
                break;
            case 5: ctx.drawImage(Resource.img.pump, ((columns / 2)-2) * GridSize, ((rows / 2)+2)*GridSize, GridSize * 3, GridSize * 3);
                break;
            case 6: ctx.drawImage(Resource.img.pump, ((columns / 2)-2) * GridSize, ((rows / 2)+2)*GridSize, GridSize * 3, GridSize * 3);
                break;
            case 7: ctx.drawImage(Resource.img.pump, ((columns / 2)-2) * GridSize, ((rows / 2)+2)*GridSize, GridSize * 3, GridSize * 3);
                break;
            case 8: ctx.drawImage(Resource.img.pump, ((columns / 2)-2) * GridSize, ((rows / 2)+4)*GridSize, GridSize * 3, GridSize * 3);
                break;
            case 9: ctx.drawImage(Resource.img.pump, ((columns / 2)-2) * GridSize, ((rows / 2)+4)*GridSize, GridSize * 3, GridSize * 3);
                break;
        }
    }

    function drawComponents()
    {
        if(level !=0)
        {
            ctx.fillStyle = 'red';
            ctx.font = '16pt Arial'
            ctx.textAlign = 'center';
            ctx.fillText('Level '+level, cwidth / 2, GridSize*2);

            ctx.fillStyle ='black';
            ctx.font = '10pt Arial';
            ctx.textAlign = 'center';
            ctx.fillText('Time to Move All Liquid: @Model.Time Hours', (cwidth / 2), GridSize*3);
            ctx.fillText('Diameter of Pipes: @Model.Diameter inches', (cwidth / 2), GridSize*4);
            ctx.fillText('Volume of Containers: @Model.Volume ft^3', (cwidth / 2), GridSize*5);
            ctx.fillText('Liquid Density: @Model.Density lbm/ft^3', (cwidth / 2), GridSize*6);
            if(level > 3)
            {
                ctx.fillText('Viscosity of Liquid: @Model.Viscosity lbm/(ft*s)', (cwidth / 2), GridSize*7);
            }
            if(level > 4)
            {
                ctx.fillText("Don't forget to calculate for ev.", (cwidth / 2), GridSize*8);
            }
            if(level > 5)
            {
                ctx.fillText("Efficiency Factor: @(Model.EfficencyFactor*100) %", (cwidth / 2), GridSize*9);
            }
            if(level > 6)
            {
                ctx.fillText("Vapor Pressure: @Model.VaporPressure psi", (cwidth / 2), GridSize*10);
            }
        }

        switch(level)
        {
            case 0:
                drawSelectButtons();
                break;

            case 1:
                ctx.strokeStyle = "black";

                ctx.beginPath();
                var x = ((columns / 2)+1) * GridSize;
                var xright = x+(Math.round(columns / 4) * GridSize);
                var y = (((rows / 2))*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xright, y);
                ctx.stroke();

                ctx.beginPath();
                x = ((columns / 2)+1) * GridSize;
                y = (((rows / 2))*GridSize)+(.5*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xright, y);
                ctx.stroke();

                var x = ((columns / 2)-2) * GridSize;
                var xleft = x-((Math.round(columns / 4)) * GridSize);
                var y = (((rows / 2))*GridSize);
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(xleft, y);
                ctx.stroke();

                ctx.beginPath();
                x = ((columns / 2)-2) * GridSize;
                y = (((rows / 2))*GridSize)+(.5*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xleft, y);
                ctx.stroke();

                leftContainerX = xleft-(3*GridSize);
                ContainerY = (y-(.5*GridSize)) - (2*GridSize);
                rightContainerX = xright;

                ctx.drawImage(Resource.img.container, leftContainerX, ContainerY, GridSize * 3, GridSize * 3);
                ctx.rect(leftContainerX, ContainerY, GridSize * 3, GridSize * 3);
                ctx.stroke();
                ctx.drawImage(Resource.img.container, rightContainerX, ContainerY, GridSize * 3, GridSize * 3);
                ctx.rect(rightContainerX, ContainerY, GridSize * 3, GridSize * 3);
                ctx.stroke();

                $("#hpEntry").css("top", ((rows / 2)-3)*GridSize+"px");
                $("#hpEntry").css("left", ((columns / 2)-3) * GridSize+"px");
                $("#HPGuess").css("width", 3*GridSize+"px");
                $("#HPGuess").css("font-size", "x-small");
                $("#hpEntry label").css("font-size", "x-small");

                break;

            case 2:

                ctx.strokeStyle = "black";

                //Draw pipes and container to the right of the pump

                ctx.beginPath();
                var x = ((columns / 2)+1) * GridSize;
                var xright = x+(Math.round(columns / 6) * GridSize);
                var y = (((rows / 2)+3)*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xright, y);
                ctx.stroke();

                ctx.beginPath();
                x = ((columns / 2)+1) * GridSize;
                y = (((rows / 2)+3)*GridSize)+(.5*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xright+(.5*GridSize), y);
                ctx.stroke();

                rightContainerX = xright - (1.5*GridSize);
                rightContainerY = y - (GridSize*10);

                ctx.drawImage(Resource.img.container, rightContainerX, rightContainerY, GridSize * 3, GridSize * 3);
                ctx.rect(rightContainerX, rightContainerY, GridSize * 3, GridSize * 3);
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xright+(.5*GridSize), y);
                ctx.lineTo(xright+(.5*GridSize), y-(GridSize*7));
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xright, y-(.5*GridSize));
                ctx.lineTo(xright, y-(.5*GridSize)-(GridSize*6.5));
                ctx.stroke();

                //Draw pipes and container to the left of the pump
                var x = ((columns / 2)-2) * GridSize;
                var xleft = x-((Math.round(columns / 6)) * GridSize);
                var y = (((rows / 2)+3)*GridSize);
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(xleft, y);
                ctx.stroke();

                ctx.beginPath();
                x = ((columns / 2)-2) * GridSize;
                y = (((rows / 2)+3)*GridSize)+(.5*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xleft-(.5*GridSize), y);
                ctx.stroke();

                leftContainerX = xleft - (1.5*GridSize);
                leftContainerY = y - (GridSize*6);

                ctx.drawImage(Resource.img.container, leftContainerX, leftContainerY, GridSize * 3, GridSize * 3);
                ctx.rect(leftContainerX, leftContainerY, GridSize * 3, GridSize * 3);
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xleft-(.5*GridSize), y);
                ctx.lineTo(xleft-(.5*GridSize), y - (GridSize*3));
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xleft, y - (.5*GridSize));
                ctx.lineTo(xleft, y - (GridSize*3));
                ctx.stroke();

                ctx.fillStyle ='black';
                ctx.font = '10pt Arial';
                ctx.textAlign = 'right';
                ctx.fillText('Height: @Model.TankOneElevation ft', xleft-(GridSize*1), y - (GridSize*2));
                ctx.fillText('Height: @Model.TankTwoElevation ft', xright+(GridSize*5.5), rightContainerY+(GridSize*5));

                $("#hpEntry").css("top", ((rows / 2))*GridSize+"px");
                $("#hpEntry").css("left", ((columns / 2)-3) * GridSize+"px");
                $("#HPGuess").css("width", 3*GridSize+"px");
                $("#HPGuess").css("font-size", "x-small");
                $("#hpEntry label").css("font-size", "x-small");
                break;

            case 3:

                ctx.strokeStyle = "black";

                //Draw pipes and container to the right of the pump

                ctx.beginPath();
                var x = ((columns / 2)+1) * GridSize;
                var xright = x+(Math.round(columns / 6) * GridSize);
                var y = (((rows / 2)+3)*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xright, y);
                ctx.stroke();

                ctx.beginPath();
                x = ((columns / 2)+1) * GridSize;
                y = (((rows / 2)+3)*GridSize)+(.5*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xright+(.5*GridSize), y);
                ctx.stroke();

                rightContainerX = xright - (1.5*GridSize);
                rightContainerY = y - (GridSize*10);

                ctx.drawImage(Resource.img.container, rightContainerX, rightContainerY, GridSize * 3, GridSize * 3);
                ctx.rect(rightContainerX, rightContainerY, GridSize * 3, GridSize * 3);
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xright+(.5*GridSize), y);
                ctx.lineTo(xright+(.5*GridSize), y-(GridSize*7));
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xright, y-(.5*GridSize));
                ctx.lineTo(xright, y-(.5*GridSize)-(GridSize*6.5));
                ctx.stroke();

                //Draw pipes and container to the left of the pump
                var x = ((columns / 2)-2) * GridSize;
                var xleft = x-((Math.round(columns / 6)) * GridSize);
                var y = (((rows / 2)+3)*GridSize);
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(xleft, y);
                ctx.stroke();

                ctx.beginPath();
                x = ((columns / 2)-2) * GridSize;
                y = (((rows / 2)+3)*GridSize)+(.5*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xleft-(.5*GridSize), y);
                ctx.stroke();

                leftContainerX = xleft - (1.5*GridSize);
                leftContainerY = y - (GridSize*6);

                ctx.drawImage(Resource.img.container, leftContainerX, leftContainerY, GridSize * 3, GridSize * 3);
                ctx.rect(leftContainerX, leftContainerY, GridSize * 3, GridSize * 3);
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xleft-(.5*GridSize), y);
                ctx.lineTo(xleft-(.5*GridSize), y - (GridSize*3));
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xleft, y - (.5*GridSize));
                ctx.lineTo(xleft, y - (GridSize*3));
                ctx.stroke();

                ctx.fillStyle ='black';
                ctx.font = '10pt Arial';
                ctx.textAlign = 'right';
                ctx.fillText('Height: @Model.TankOneElevation ft', xleft-(GridSize*1), y - (GridSize*2));
                ctx.fillText('Height: @Model.TankTwoElevation ft', xright+(GridSize*6), rightContainerY+(GridSize*8));
                ctx.fillText('Pressure: @Model.TankOnePressure psi', leftContainerX-GridSize, (leftContainerY+(buttonSize*.5)));
                ctx.fillText('Pressure: @Model.TankTwoPressure psi', rightContainerX+(GridSize*11), (rightContainerY+(buttonSize*.5)));


                $("#hpEntry").css("top", ((rows / 2))*GridSize+"px");
                $("#hpEntry").css("left", ((columns / 2)-3) * GridSize+"px");
                $("#HPGuess").css("width", 3*GridSize+"px");
                $("#HPGuess").css("font-size", "x-small");
                $("#hpEntry label").css("font-size", "x-small");
                break;

            case 4:

                ctx.strokeStyle = "black";

                //Draw pipes and container to the right of the pump

                ctx.beginPath();
                var x = ((columns / 2)+1) * GridSize;
                var xright = x+(Math.round(columns / 6) * GridSize);
                var y = (((rows / 2)+3)*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xright, y);
                ctx.stroke();

                ctx.beginPath();
                x = ((columns / 2)+1) * GridSize;
                y = (((rows / 2)+3)*GridSize)+(.5*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xright+(.5*GridSize), y);
                ctx.stroke();

                rightContainerX = xright - (1.5*GridSize);
                rightContainerY = y - (GridSize*10);

                ctx.drawImage(Resource.img.container, rightContainerX, rightContainerY, GridSize * 3, GridSize * 3);
                ctx.rect(rightContainerX, rightContainerY, GridSize * 3, GridSize * 3);
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xright+(.5*GridSize), y);
                ctx.lineTo(xright+(.5*GridSize), y-(GridSize*7));
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xright, y-(.5*GridSize));
                ctx.lineTo(xright, y-(.5*GridSize)-(GridSize*6.5));
                ctx.stroke();

                //Draw pipes and container to the left of the pump
                var x = ((columns / 2)-2) * GridSize;
                var xleft = x-((Math.round(columns / 6)) * GridSize);
                var y = (((rows / 2)+3)*GridSize);
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(xleft, y);
                ctx.stroke();

                ctx.beginPath();
                x = ((columns / 2)-2) * GridSize;
                y = (((rows / 2)+3)*GridSize)+(.5*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xleft-(.5*GridSize), y);
                ctx.stroke();

                leftContainerX = xleft - (1.5*GridSize);
                leftContainerY = y - (GridSize*6);

                ctx.drawImage(Resource.img.container, leftContainerX, leftContainerY, GridSize * 3, GridSize * 3);
                ctx.rect(leftContainerX, leftContainerY, GridSize * 3, GridSize * 3);
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xleft-(.5*GridSize), y);
                ctx.lineTo(xleft-(.5*GridSize), y - (GridSize*3));
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xleft, y - (.5*GridSize));
                ctx.lineTo(xleft, y - (GridSize*3));
                ctx.stroke();

                ctx.fillStyle ='black';
                ctx.font = '10pt Arial';
                ctx.textAlign = 'right';
                ctx.fillText('Height: @Model.TankOneElevation ft', xleft-(GridSize*1), y - (GridSize*2));
                ctx.fillText('Height: @Model.TankTwoElevation ft', xright+(GridSize*6), rightContainerY+(GridSize*8));
                ctx.fillText('Pressure: @Model.TankOnePressure psi', leftContainerX-GridSize, (leftContainerY+(buttonSize*.5)));
                ctx.fillText('Pressure: @Model.TankTwoPressure psi', rightContainerX+(GridSize*11), (rightContainerY+(buttonSize*.5)));
                ctx.fillText('Horizontal Length: @Model.VertLengthOne', centerx - (4*GridSize),centery + (5*GridSize));
                ctx.fillText('Horizontal Length: @Model.VertLengthTwo', centerx + (10*GridSize),centery + (5*GridSize));


                $("#hpEntry").css("top", ((rows / 2))*GridSize+"px");
                $("#hpEntry").css("left", ((columns / 2)-3) * GridSize+"px");
                $("#HPGuess").css("width", 3*GridSize+"px");
                $("#HPGuess").css("font-size", "x-small");
                $("#hpEntry label").css("font-size", "x-small");
                break;

            case 5:

                ctx.strokeStyle = "black";

                //Draw pipes and container to the right of the pump

                ctx.beginPath();
                var x = ((columns / 2)+1) * GridSize;
                var xright = x+(Math.round(columns / 6) * GridSize);
                var y = (((rows / 2)+3)*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xright, y);
                ctx.stroke();

                ctx.beginPath();
                x = ((columns / 2)+1) * GridSize;
                y = (((rows / 2)+3)*GridSize)+(.5*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xright+(.5*GridSize), y);
                ctx.stroke();

                var rightValvex = ((xright+(.5*GridSize))-((xright-x)/2))-(3*GridSize);
                var rightValvey = (y-(2*GridSize));

                rightContainerX = xright - (1.5*GridSize);
                rightContainerY = y - (GridSize*10);

                ctx.drawImage(Resource.img.container, rightContainerX, rightContainerY, GridSize * 3, GridSize * 3);
                ctx.rect(rightContainerX, rightContainerY, GridSize * 3, GridSize * 3);
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xright+(.5*GridSize), y);
                ctx.lineTo(xright+(.5*GridSize), y-(GridSize*7));
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xright, y-(.5*GridSize));
                ctx.lineTo(xright, y-(.5*GridSize)-(GridSize*6.5));
                ctx.stroke();

                //Draw pipes and container to the left of the pump
                var x = ((columns / 2)-2) * GridSize;
                var xleft = x-((Math.round(columns / 6)) * GridSize);
                var y = (((rows / 2)+3)*GridSize);
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(xleft, y);
                ctx.stroke();

                ctx.beginPath();
                x = ((columns / 2)-2) * GridSize;
                y = (((rows / 2)+3)*GridSize)+(.5*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xleft-(.5*GridSize), y);
                ctx.stroke();

                var leftValvex = ((xleft-(.5*GridSize))+((x-(xleft-(.5*GridSize)))/2));
                var leftValvey = (y-(2*GridSize));

                leftContainerX = xleft - (1.5*GridSize);
                leftContainerY = y - (GridSize*6);

                ctx.drawImage(Resource.img.container, leftContainerX, leftContainerY, GridSize * 3, GridSize * 3);
                ctx.rect(leftContainerX, leftContainerY, GridSize * 3, GridSize * 3);
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xleft-(.5*GridSize), y);
                ctx.lineTo(xleft-(.5*GridSize), y - (GridSize*3));
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xleft, y - (.5*GridSize));
                ctx.lineTo(xleft, y - (GridSize*3));
                ctx.stroke();

                //Draw Valves
                ctx.drawImage(Resource.img.valve, leftValvex, leftValvey, GridSize * 3, GridSize * 3);
                ctx.drawImage(Resource.img.valve, rightValvex, rightValvey, GridSize * 3, GridSize * 3);

                ctx.fillStyle ='black';
                ctx.font = '10pt Arial';
                ctx.textAlign = 'right';
                ctx.fillText('Height: @Model.TankOneElevation ft', xleft-(GridSize*1), y - (GridSize*2));
                ctx.fillText('Height: @Model.TankTwoElevation ft', xright+(GridSize*6), rightContainerY+(GridSize*8));
                ctx.fillText('Pressure: @Model.TankOnePressure psi', leftContainerX-GridSize, (leftContainerY+(buttonSize*.5)));
                ctx.fillText('Pressure: @Model.TankTwoPressure psi', rightContainerX+(GridSize*11), (rightContainerY+(buttonSize*.5)));
                ctx.fillText('Horizontal Length: @Model.VertLengthOne', centerx - (4*GridSize),centery + (6*GridSize));
                ctx.fillText('Horizontal Length: @Model.VertLengthTwo', centerx + (10*GridSize),centery + (6*GridSize));


                $("#hpEntry").css("top", ((rows / 2))*GridSize+"px");
                $("#hpEntry").css("left", ((columns / 2)-3) * GridSize+"px");
                $("#HPGuess").css("width", 3*GridSize+"px");
                $("#HPGuess").css("font-size", "x-small");
                $("#hpEntry label").css("font-size", "x-small");
                break;
            case 6:

                ctx.strokeStyle = "black";

                //Draw pipes and container to the right of the pump

                ctx.beginPath();
                var x = ((columns / 2)+1) * GridSize;
                var xright = x+(Math.round(columns / 6) * GridSize);
                var y = (((rows / 2)+3)*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xright, y);
                ctx.stroke();

                ctx.beginPath();
                x = ((columns / 2)+1) * GridSize;
                y = (((rows / 2)+3)*GridSize)+(.5*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xright+(.5*GridSize), y);
                ctx.stroke();

                var rightValvex = ((xright+(.5*GridSize))-((xright-x)/2))-(3*GridSize);
                var rightValvey = (y-(2*GridSize));

                rightContainerX = xright - (1.5*GridSize);
                rightContainerY = y - (GridSize*10);

                ctx.drawImage(Resource.img.container, rightContainerX, rightContainerY, GridSize * 3, GridSize * 3);
                ctx.rect(rightContainerX, rightContainerY, GridSize * 3, GridSize * 3);
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xright+(.5*GridSize), y);
                ctx.lineTo(xright+(.5*GridSize), y-(GridSize*7));
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xright, y-(.5*GridSize));
                ctx.lineTo(xright, y-(.5*GridSize)-(GridSize*6.5));
                ctx.stroke();

                //Draw pipes and container to the left of the pump
                var x = ((columns / 2)-2) * GridSize;
                var xleft = x-((Math.round(columns / 6)) * GridSize);
                var y = (((rows / 2)+3)*GridSize);
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(xleft, y);
                ctx.stroke();

                ctx.beginPath();
                x = ((columns / 2)-2) * GridSize;
                y = (((rows / 2)+3)*GridSize)+(.5*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xleft-(.5*GridSize), y);
                ctx.stroke();

                var leftValvex = ((xleft-(.5*GridSize))+((x-(xleft-(.5*GridSize)))/2));
                var leftValvey = (y-(2*GridSize));

                leftContainerX = xleft - (1.5*GridSize);
                leftContainerY = y - (GridSize*6);

                ctx.drawImage(Resource.img.container, leftContainerX, leftContainerY, GridSize * 3, GridSize * 3);
                ctx.rect(leftContainerX, leftContainerY, GridSize * 3, GridSize * 3);
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xleft-(.5*GridSize), y);
                ctx.lineTo(xleft-(.5*GridSize), y - (GridSize*3));
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xleft, y - (.5*GridSize));
                ctx.lineTo(xleft, y - (GridSize*3));
                ctx.stroke();

                //Draw Valves
                ctx.drawImage(Resource.img.valve, leftValvex, leftValvey, GridSize * 3, GridSize * 3);
                ctx.drawImage(Resource.img.valve, rightValvex, rightValvey, GridSize * 3, GridSize * 3);

                ctx.fillStyle ='black';
                ctx.font = '10pt Arial';
                ctx.textAlign = 'right';
                ctx.fillText('Height: @Model.TankOneElevation ft', xleft-(GridSize*1), y - (GridSize*2));
                ctx.fillText('Height: @Model.TankTwoElevation ft', xright+(GridSize*6), rightContainerY+(GridSize*8));
                ctx.fillText('Pressure: @Model.TankOnePressure psi', leftContainerX-GridSize, (leftContainerY+(buttonSize*.5)));
                ctx.fillText('Pressure: @Model.TankTwoPressure psi', rightContainerX+(GridSize*11), (rightContainerY+(buttonSize*.5)));
                ctx.fillText('Horizontal Length: @Model.VertLengthOne', centerx - (4*GridSize),centery + (6*GridSize));
                ctx.fillText('Horizontal Length: @Model.VertLengthTwo', centerx + (10*GridSize),centery + (6*GridSize));


                $("#hpEntry").css("top", ((rows / 2))*GridSize+"px");
                $("#hpEntry").css("left", ((columns / 2)-3) * GridSize+"px");
                $("#HPGuess").css("width", 3*GridSize+"px");
                $("#HPGuess").css("font-size", "x-small");
                $("#hpEntry label").css("font-size", "x-small");
                break;
            case 7:

                ctx.strokeStyle = "black";

                //Draw pipes and container to the right of the pump

                ctx.beginPath();
                var x = ((columns / 2)+1) * GridSize;
                var xright = x+(Math.round(columns / 6) * GridSize);
                var y = (((rows / 2)+3)*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xright, y);
                ctx.stroke();

                ctx.beginPath();
                x = ((columns / 2)+1) * GridSize;
                y = (((rows / 2)+3)*GridSize)+(.5*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xright+(.5*GridSize), y);
                ctx.stroke();

                var rightValvex = ((xright+(.5*GridSize))-((xright-x)/2))-(3*GridSize);
                var rightValvey = (y-(2*GridSize));

                rightContainerX = xright - (1.5*GridSize);
                rightContainerY = y - (GridSize*10);

                ctx.drawImage(Resource.img.container, rightContainerX, rightContainerY, GridSize * 3, GridSize * 3);
                ctx.rect(rightContainerX, rightContainerY, GridSize * 3, GridSize * 3);
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xright+(.5*GridSize), y);
                ctx.lineTo(xright+(.5*GridSize), y-(GridSize*7));
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xright, y-(.5*GridSize));
                ctx.lineTo(xright, y-(.5*GridSize)-(GridSize*6.5));
                ctx.stroke();

                //Draw pipes and container to the left of the pump
                var x = ((columns / 2)-2) * GridSize;
                var xleft = x-((Math.round(columns / 6)) * GridSize);
                var y = (((rows / 2)+3)*GridSize);
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(xleft, y);
                ctx.stroke();

                ctx.beginPath();
                x = ((columns / 2)-2) * GridSize;
                y = (((rows / 2)+3)*GridSize)+(.5*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xleft-(.5*GridSize), y);
                ctx.stroke();

                var leftValvex = ((xleft-(.5*GridSize))+((x-(xleft-(.5*GridSize)))/2));
                var leftValvey = (y-(2*GridSize));

                leftContainerX = xleft - (1.5*GridSize);
                leftContainerY = y - (GridSize*6);

                ctx.drawImage(Resource.img.container, leftContainerX, leftContainerY, GridSize * 3, GridSize * 3);
                ctx.rect(leftContainerX, leftContainerY, GridSize * 3, GridSize * 3);
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xleft-(.5*GridSize), y);
                ctx.lineTo(xleft-(.5*GridSize), y - (GridSize*3));
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xleft, y - (.5*GridSize));
                ctx.lineTo(xleft, y - (GridSize*3));
                ctx.stroke();

                //Draw Valves
                ctx.drawImage(Resource.img.valve, leftValvex, leftValvey, GridSize * 3, GridSize * 3);
                ctx.drawImage(Resource.img.valve, rightValvex, rightValvey, GridSize * 3, GridSize * 3);

                ctx.fillStyle ='black';
                ctx.font = '10pt Arial';
                ctx.textAlign = 'right';
                ctx.fillText('Height: @Model.TankOneElevation ft', xleft-(GridSize*1), y - (GridSize*2));
                ctx.fillText('Height: @Model.TankTwoElevation ft', xright+(GridSize*6), rightContainerY+(GridSize*8));
                ctx.fillText('Pressure: @Model.TankOnePressure psi', leftContainerX-GridSize, (leftContainerY+(buttonSize*.5)));
                ctx.fillText('Pressure: @Model.TankTwoPressure psi', rightContainerX+(GridSize*11), (rightContainerY+(buttonSize*.5)));
                ctx.fillText('Horizontal Length: @Model.VertLengthOne', centerx - (4*GridSize),centery + (6*GridSize));
                ctx.fillText('Horizontal Length: @Model.VertLengthTwo', centerx + (10*GridSize),centery + (6*GridSize));


                $("#hpEntry").css("top", (((rows / 2))*GridSize -(1.5*GridSize))+"px");
                $("#hpEntry").css("left", ((columns / 2)-3) * GridSize+"px");
                $("#HPGuess").css("width", 3*GridSize+"px");
                $("#HPGuess").css("font-size", "x-small");
                $("#NPSHGuess").css("width", 3*GridSize+"px");
                $("#NPSHGuess").css("font-size", "x-small");
                $("#hpEntry label").css("font-size", "x-small");
                break;
            case 8:

                ctx.strokeStyle = "black";

                //Draw pipes and container to the right of the pump

                ctx.beginPath();
                var x = ((columns / 2)+1) * GridSize;
                var xright = x+(Math.round(columns / 6) * GridSize);
                var y = (((rows / 2)+5)*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xright, y);
                ctx.stroke();

                ctx.beginPath();
                x = ((columns / 2)+1) * GridSize;
                y = (((rows / 2)+5)*GridSize)+(.5*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xright+(.5*GridSize), y);
                ctx.stroke();

                var rightValvex = ((xright+(.5*GridSize))-((xright-x)/2))-(3*GridSize);
                var rightValvey = (y-(2*GridSize));

                rightContainerX = xright - (1.5*GridSize);
                rightContainerY = y - (GridSize*10);

                ctx.drawImage(Resource.img.container, rightContainerX, rightContainerY, GridSize * 3, GridSize * 3);
                ctx.rect(rightContainerX, rightContainerY, GridSize * 3, GridSize * 3);
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xright+(.5*GridSize), y);
                ctx.lineTo(xright+(.5*GridSize), y-(GridSize*7));
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xright, y-(.5*GridSize));
                ctx.lineTo(xright, y-(.5*GridSize)-(GridSize*6.5));
                ctx.stroke();

                //Draw pipes and container to the left of the pump
                var x = ((columns / 2)-2) * GridSize;
                var xleft = x-((Math.round(columns / 6)) * GridSize);
                var y = (((rows / 2)+5)*GridSize);
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(xleft, y);
                ctx.stroke();

                ctx.beginPath();
                x = ((columns / 2)-2) * GridSize;
                y = (((rows / 2)+5)*GridSize)+(.5*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xleft-(.5*GridSize), y);
                ctx.stroke();

                var leftValvex = ((xleft-(.5*GridSize))+((x-(xleft-(.5*GridSize)))/2));
                var leftValvey = (y-(2*GridSize));

                leftContainerX = xleft - (1.5*GridSize);
                leftContainerY = y - (GridSize*6);

                ctx.drawImage(Resource.img.container, leftContainerX, leftContainerY, GridSize * 3, GridSize * 3);
                ctx.rect(leftContainerX, leftContainerY, GridSize * 3, GridSize * 3);
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xleft-(.5*GridSize), y);
                ctx.lineTo(xleft-(.5*GridSize), y - (GridSize*3));
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xleft, y - (.5*GridSize));
                ctx.lineTo(xleft, y - (GridSize*3));
                ctx.stroke();

                //Draw Valves
                ctx.drawImage(Resource.img.valve, leftValvex, leftValvey, GridSize * 3, GridSize * 3);
                ctx.drawImage(Resource.img.valve, rightValvex, rightValvey, GridSize * 3, GridSize * 3);

                ctx.fillStyle ='black';
                ctx.font = '10pt Arial';
                ctx.textAlign = 'right';
                ctx.fillText('Height: @Model.TankOneElevation ft', xleft-(GridSize*1), y - (GridSize*2));
                ctx.fillText('Height: @Model.TankTwoElevation ft', xright+(GridSize*6), rightContainerY+(GridSize*8));
                ctx.fillText('Pressure: @Model.TankOnePressure psi', leftContainerX-GridSize, (leftContainerY+(buttonSize*.5)));
                ctx.fillText('Pressure: @Model.TankTwoPressure psi', rightContainerX+(GridSize*11), (rightContainerY+(buttonSize*.5)));
                ctx.fillText('Horizontal Length: @Model.VertLengthOne', centerx - (4*GridSize),centery + (8*GridSize));
                ctx.fillText('Horizontal Length: @Model.VertLengthTwo', centerx + (10*GridSize),centery + (8*GridSize));


                $("#hpEntry").css("top", ((((rows / 2))*GridSize)-(GridSize))+"px");
                $("#hpEntry").css("left", ((columns / 2)-3) * GridSize+"px");
                $("#HPGuess").css("width", 2*GridSize+"px");
                $("#HPGuess").css("font-size", "x-small");
                $("#NPSHGuess").css("width", 2*GridSize+"px");
                $("#NPSHGuess").css("font-size", "x-small");
                $("#hpEntry label").css("font-size", "x-small");
                break;
            case 9:

                ctx.strokeStyle = "black";

                //Draw pipes and container to the right of the pump

                ctx.beginPath();
                var x = ((columns / 2)+1) * GridSize;
                var xright = x+(Math.round(columns / 6) * GridSize);
                var y = (((rows / 2)+5)*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xright, y);
                ctx.stroke();

                ctx.beginPath();
                x = ((columns / 2)+1) * GridSize;
                y = (((rows / 2)+5)*GridSize)+(.5*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xright+(.5*GridSize), y);
                ctx.stroke();

                var rightValvex = ((xright+(.5*GridSize))-((xright-x)/2))-(3*GridSize);
                var rightValvey = (y-(2*GridSize));

                rightContainerX = xright - (1.5*GridSize);
                rightContainerY = y - (GridSize*10);

                ctx.drawImage(Resource.img.container, rightContainerX, rightContainerY, GridSize * 3, GridSize * 3);
                ctx.rect(rightContainerX, rightContainerY, GridSize * 3, GridSize * 3);
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xright+(.5*GridSize), y);
                ctx.lineTo(xright+(.5*GridSize), y-(GridSize*7));
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xright, y-(.5*GridSize));
                ctx.lineTo(xright, y-(.5*GridSize)-(GridSize*6.5));
                ctx.stroke();

                //Draw pipes and container to the left of the pump
                var x = ((columns / 2)-2) * GridSize;
                var xleft = x-((Math.round(columns / 6)) * GridSize);
                var y = (((rows / 2)+5)*GridSize);
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(xleft, y);
                ctx.stroke();

                ctx.beginPath();
                x = ((columns / 2)-2) * GridSize;
                y = (((rows / 2)+5)*GridSize)+(.5*GridSize);
                ctx.moveTo(x, y);
                ctx.lineTo(xleft-(.5*GridSize), y);
                ctx.stroke();

                var leftValvex = ((xleft-(.5*GridSize))+((x-(xleft-(.5*GridSize)))/2));
                var leftValvey = (y-(2*GridSize));

                leftContainerX = xleft - (1.5*GridSize);
                leftContainerY = y - (GridSize*6);

                ctx.drawImage(Resource.img.container, leftContainerX, leftContainerY, GridSize * 3, GridSize * 3);
                ctx.rect(leftContainerX, leftContainerY, GridSize * 3, GridSize * 3);
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xleft-(.5*GridSize), y);
                ctx.lineTo(xleft-(.5*GridSize), y - (GridSize*3));
                ctx.stroke();

                ctx.beginPath();
                ctx.moveTo(xleft, y - (.5*GridSize));
                ctx.lineTo(xleft, y - (GridSize*3));
                ctx.stroke();

                //Draw Valves
                ctx.drawImage(Resource.img.valve, leftValvex, leftValvey, GridSize * 3, GridSize * 3);
                ctx.drawImage(Resource.img.valve, rightValvex, rightValvey, GridSize * 3, GridSize * 3);

                ctx.fillStyle ='black';
                ctx.font = '10pt Arial';
                ctx.textAlign = 'right';
                ctx.fillText('Height: @Model.TankOneElevation ft', xleft-(GridSize*1), y - (GridSize*2));
                ctx.fillText('Height: @Model.TankTwoElevation ft', xright+(GridSize*6), rightContainerY+(GridSize*8));
                ctx.fillText('Pressure: @Model.TankOnePressure psi', leftContainerX-GridSize, (leftContainerY+(buttonSize*.5)));
                ctx.fillText('Pressure: @Model.TankTwoPressure psi', rightContainerX+(GridSize*11), (rightContainerY+(buttonSize*.5)));
                ctx.fillText('Horizontal Length: @Model.VertLengthOne', centerx - (4*GridSize),centery + (8*GridSize));
                ctx.fillText('Horizontal Length: @Model.VertLengthTwo', centerx + (10*GridSize),centery + (8*GridSize));


                $("#hpEntry").css("top", ((((rows / 2))*GridSize)-(1.5*GridSize))+"px");
                $("#hpEntry").css("left", ((columns / 2)-4) * GridSize+"px");
                $("#HPGuess").css("width", 3*GridSize+"px");
                $("#HPGuess").css("font-size", "x-small");
                $("#NPSHGuess").css("width", 3*GridSize+"px");
                $("#NPSHGuess").css("font-size", "x-small");
                $("#CostGuess").css("width", 3*GridSize+"px");
                $("#CostGuess").css("font-size", "x-small");
                $("#PumpType").css("font-size", "x-small");
                $("#hpEntry label").css("font-size", "x-small");
                break;
        }
    }

    function submitPage()
    {
        if(level < 7)
        {
            $.getJSON('@Url.Action("SubmitLevel","Home")', { levelId: $("#LevelId").val(), level: level, HPGuess: $("#HPGuess").val()},
                function(data) {
                    if(data.star != 0)
                    {
                        drawResponse(true,false,data.message, data.star);
                    }
                    else{
                        if(data.max==true)
                        {
                            drawResponse(false,true,data.message, data.star);
                        }
                        else{
                            var message = data.message;
                            if(message == "place_holder")
                            {
                                message = "Invalid Input";
                            }
                            drawResponse(false, false, message, data.star);
                        }
                    }
                }
            );

        }
        else if(level == 7)
        {
            $.getJSON('@Url.Action("SubmitLevel","Home")', { levelId: $("#LevelId").val(), level: level, HPGuess: $("#HPGuess").val(), NPSHGuess: $("#NPSHGuess").val() },
                function(data) {
                    if(data.star != 0)
                    {
                        drawResponse(true,false,data.message, data.star);
                    }
                    else{
                        if(data.max==true)
                        {
                            drawResponse(false,true,data.message, data.star);
                        }
                        else{
                            var message = data.message;
                            if(message == "place_holder")
                            {
                                message = "Invalid Input";
                            }
                            drawResponse(false, false, message, data.star);
                        }
                    }
                }
            );
        }
        else if (level == 8)
        {
            var pumptype = $( "#PumpType option:selected" ).text();
            $.getJSON('@Url.Action("SubmitLevel","Home")', { levelId: $("#LevelId").val(), level: level, HPGuess: $("#HPGuess").val(), NPSHGuess: $("#NPSHGuess").val(), pumpType:pumptype  },
                function(data) {
                    if(data.star != 0)
                    {
                        drawResponse(true,false,data.message, data.star);
                    }
                    else{
                        if(data.max==true)
                        {
                            drawResponse(false,true,data.message, data.star);
                        }
                        else{
                            var message = data.message;
                            if(message == "place_holder")
                            {
                                message = "Invalid Input";
                            }
                            drawResponse(false, false, message, data.star);
                        }
                    }
                }
            );
        }
        else if (level ==9)
        {
            if($("#HPGuess").val() != "" && $("#NPSHGuess").val() != "" && $("#CostGuess").val() != "")
            {
                var pumptype = $( "#PumpType option:selected" ).text();
                $.getJSON('@Url.Action("SubmitLevel","Home")', { levelId: $("#LevelId").val(), level: level, HPGuess: $("#HPGuess").val(), NPSHGuess: $("#NPSHGuess").val(), pumpType:pumptype, cost:$("#CostGuess").val() },
                    function(data) {
                        if(data.star != 0)
                        {
                            drawResponse(true,false,data.message, data.star);
                        }
                        else{
                            if(data.max==true)
                            {
                                drawResponse(false,true,data.message, data.star);
                            }
                            else{
                                var message = data.message;
                                if(message == "place_holder")
                                {
                                    message = "Invalid Input";
                                }
                                drawResponse(false, false, message, data.star);
                            }
                        }
                    }
                );
            }
        }

    }

    function levelselectPage(){
        window.location.href = '@Url.Action("Index","Home",new{level = 0})';
    }

    function logOut()
    {
        window.location.href = '@Url.Action("LogOff", "Account")';
    }

</script>

    @if (Model.LevelsCompleted != null)
    {
        <script type="text/javascript">
    function drawSelectButtons()
    {
        ctx.fillStyle = 'white';
        ctx.rect(0, 0, width, height);
        ctx.fill();

        ctx.strokeStyle = "black";
        ctx.fillStyle = 'red';
        ctx.font = '10pt Arial'
        ctx.textAlign = 'center';

        var buttonstoprowy = centery - ((rows/3)*GridSize);
        var buttonsleftx =  centerx - (5.5*GridSize);

        @if(Model.LevelsCompleted.Levels[0].Locked)
        {
            @:ctx.drawImage(Resource.img.locked, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                                        }
        else if (Model.LevelsCompleted.Levels[0].Stars == 0)
        {
            @:ctx.drawImage(Resource.img.pump, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                                        }
        else if (Model.LevelsCompleted.Levels[0].Stars == 1)
        {
            @:ctx.drawImage(Resource.img.star1, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                                        }
        else if (Model.LevelsCompleted.Levels[0].Stars == 2)
        {
            @:ctx.drawImage(Resource.img.star2, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                                        }
        else if (Model.LevelsCompleted.Levels[0].Stars == 3)
        {
            @:ctx.drawImage(Resource.img.star3, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                                        }
        ctx.rect(buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
        ctx.stroke();
        ctx.fillText('Level @Model.LevelsCompleted.Levels[0].LevelNum', buttonsleftx+(GridSize * 1.5), buttonstoprowy+(GridSize * 1));

        @if(Model.LevelsCompleted.Levels[1].Locked)
        {
            @:ctx.drawImage(Resource.img.locked, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                                                                }
        else if (Model.LevelsCompleted.Levels[1].Stars == 0)
        {
            @:ctx.drawImage(Resource.img.pump, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                                                                }
        else if (Model.LevelsCompleted.Levels[1].Stars == 1)
        {
            @:ctx.drawImage(Resource.img.star1, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                                                        }
        else if (Model.LevelsCompleted.Levels[1].Stars == 2)
        {
            @:ctx.drawImage(Resource.img.star2, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                                                }
        else if (Model.LevelsCompleted.Levels[1].Stars == 3)
        {
            @:ctx.drawImage(Resource.img.star3, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                                        }
        ctx.rect(buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
        ctx.stroke();
        ctx.fillText('Level @Model.LevelsCompleted.Levels[1].LevelNum', buttonsleftx+(GridSize * 5.5), buttonstoprowy+(GridSize * 1));

        @if(Model.LevelsCompleted.Levels[2].Locked)
        {
            @:ctx.drawImage(Resource.img.locked, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                                }
        else if (Model.LevelsCompleted.Levels[2].Stars == 0)
        {
            @:ctx.drawImage(Resource.img.pump, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                                }
        else if (Model.LevelsCompleted.Levels[2].Stars == 1)
        {
            @:ctx.drawImage(Resource.img.star1, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                                }
        else if (Model.LevelsCompleted.Levels[2].Stars == 2)
        {
            @:ctx.drawImage(Resource.img.star2, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                                }
        else if (Model.LevelsCompleted.Levels[2].Stars == 3)
        {
            @:ctx.drawImage(Resource.img.star3, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                                }
        ctx.rect(buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
        ctx.stroke();
        ctx.fillText('Level @Model.LevelsCompleted.Levels[2].LevelNum', buttonsleftx+(GridSize * 9.5), buttonstoprowy+(GridSize * 1));

        buttonstoprowy = buttonstoprowy + (GridSize * 4);


        @if(Model.LevelsCompleted.Levels[3].Locked)
        {
            @:ctx.drawImage(Resource.img.locked, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[3].Stars == 0)
        {
            @:ctx.drawImage(Resource.img.pump, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[3].Stars == 1)
        {
            @:ctx.drawImage(Resource.img.star1, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[3].Stars == 2)
        {
            @:ctx.drawImage(Resource.img.star2, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[3].Stars == 3)
        {
            @:ctx.drawImage(Resource.img.star3, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                        }
        ctx.rect(buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
        ctx.stroke();
        ctx.fillText('Level @Model.LevelsCompleted.Levels[3].LevelNum', buttonsleftx+(GridSize * 1.5), buttonstoprowy+(GridSize * 1));

        @if(Model.LevelsCompleted.Levels[4].Locked)
        {
            @:ctx.drawImage(Resource.img.locked, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[4].Stars == 0)
        {
            @:ctx.drawImage(Resource.img.pump, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[4].Stars == 1)
        {
            @:ctx.drawImage(Resource.img.star1, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[4].Stars == 2)
        {
            @:ctx.drawImage(Resource.img.star2, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[4].Stars == 3)
        {
            @:ctx.drawImage(Resource.img.star3, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                        }
        ctx.rect(buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
        ctx.stroke();
        ctx.fillText('Level @Model.LevelsCompleted.Levels[4].LevelNum', buttonsleftx+(GridSize * 5.5), buttonstoprowy+(GridSize * 1));

        @if(Model.LevelsCompleted.Levels[5].Locked)
        {
            @:ctx.drawImage(Resource.img.locked, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[5].Stars == 0)
        {
            @:ctx.drawImage(Resource.img.pump, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[5].Stars == 1)
        {
            @:ctx.drawImage(Resource.img.star1, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[5].Stars == 2)
        {
            @:ctx.drawImage(Resource.img.star2, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[5].Stars == 3)
        {
            @:ctx.drawImage(Resource.img.star3, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                        }
        ctx.rect(buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
        ctx.stroke();
        ctx.fillText('Level @Model.LevelsCompleted.Levels[5].LevelNum', buttonsleftx+(GridSize * 9.5), buttonstoprowy+(GridSize * 1));

        buttonstoprowy = buttonstoprowy + (GridSize * 4);

        @if(Model.LevelsCompleted.Levels[6].Locked)
        {
            @:ctx.drawImage(Resource.img.locked, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[6].Stars == 0)
        {
            @:ctx.drawImage(Resource.img.pump, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[6].Stars == 1)
        {
            @:ctx.drawImage(Resource.img.star1, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[6].Stars == 2)
        {
            @:ctx.drawImage(Resource.img.star2, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                        }
        else if (Model.LevelsCompleted.Levels[6].Stars == 3)
        {
            @:ctx.drawImage(Resource.img.star3, buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
                        }
        ctx.rect(buttonsleftx, buttonstoprowy, buttonSize, buttonSize);
        ctx.stroke();
        ctx.fillText('Level @Model.LevelsCompleted.Levels[6].LevelNum', buttonsleftx+(GridSize * 1.5), buttonstoprowy+(GridSize * 1));

        @if(Model.LevelsCompleted.Levels[7].Locked)
        {
            @:ctx.drawImage(Resource.img.locked, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                }
        else if (Model.LevelsCompleted.Levels[7].Stars == 0)
        {
            @:ctx.drawImage(Resource.img.pump, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                }
        else if (Model.LevelsCompleted.Levels[7].Stars == 1)
        {
            @:ctx.drawImage(Resource.img.star1, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                }
        else if (Model.LevelsCompleted.Levels[7].Stars == 2)
        {
            @:ctx.drawImage(Resource.img.star2, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                }
        else if (Model.LevelsCompleted.Levels[7].Stars == 3)
        {
            @:ctx.drawImage(Resource.img.star3, buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
                }
        ctx.rect(buttonsleftx+(4*GridSize), buttonstoprowy, buttonSize, buttonSize);
        ctx.stroke();
        ctx.fillText('Level @Model.LevelsCompleted.Levels[7].LevelNum', buttonsleftx+(GridSize * 5.5), buttonstoprowy+(GridSize * 1));

        @if(Model.LevelsCompleted.Levels[8].Locked)
        {
            @:ctx.drawImage(Resource.img.locked, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                }
        else if (Model.LevelsCompleted.Levels[8].Stars == 0)
        {
            @:ctx.drawImage(Resource.img.pump, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                }
        else if (Model.LevelsCompleted.Levels[8].Stars == 1)
        {
            @:ctx.drawImage(Resource.img.star1, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                }
        else if (Model.LevelsCompleted.Levels[8].Stars == 2)
        {
            @:ctx.drawImage(Resource.img.star2, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                }
        else if (Model.LevelsCompleted.Levels[8].Stars == 3)
        {
            @:ctx.drawImage(Resource.img.star3, buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
                }
        ctx.rect(buttonsleftx+(8*GridSize), buttonstoprowy, buttonSize, buttonSize);
        ctx.stroke();
        ctx.fillText('Level @Model.LevelsCompleted.Levels[8].LevelNum', buttonsleftx+(GridSize * 9.5), buttonstoprowy+(GridSize * 1));
    }
    function getLevel(x,y)
    {
        var firstButtonMinX = (centerx - (5.5*GridSize));
        var firstButtonMinY = centery - ((rows/3)*GridSize);
        var firstButtonMaxX = (firstButtonMinX+buttonSize);
        var firstButtonMaxY = (firstButtonMinY+buttonSize);
        var secondButtonMinX = (firstButtonMaxX+GridSize);
        var secondButtonMaxX = secondButtonMinX + buttonSize;
        var thirdButtonMinX = (secondButtonMaxX+GridSize);
        var thirdButtonMaxX= thirdButtonMinX + buttonSize;
        var fourthButtonMinX= firstButtonMinX;
        var fourthButtonMaxX = (fourthButtonMinX+ buttonSize);
        var fourthButtonMinY = (firstButtonMaxY+GridSize);
        var fourthButtonMaxY = (fourthButtonMinY+ buttonSize);
        var fifthButtonMinX = (fourthButtonMaxX + GridSize);
        var fifthButtonMaxX = (fifthButtonMinX + buttonSize);
        var sixthButtonMinX = (fifthButtonMaxX + GridSize);
        var sixthButtonMaxX = (sixthButtonMinX + buttonSize);
        var seventhButtonMinY = (fourthButtonMaxY+GridSize);
        var seventhButtonMaxY = (seventhButtonMinY + buttonSize);
        var seventhButtonMinX= fourthButtonMinX;
        var seventhButtonMaxX = (seventhButtonMinX+ buttonSize);
        var eighthButtonMinX = (seventhButtonMaxX + GridSize);
        var eighthButtonMaxX = (eighthButtonMinX + buttonSize);
        var ninthButtonMinX = (eighthButtonMaxX + GridSize);
        var ninthButtonMaxX = (ninthButtonMinX + buttonSize);

        console.log(x+','+y);
        if(x>firstButtonMinX && x<thirdButtonMaxX && y>firstButtonMinY && y < firstButtonMaxY)
        {
            if(x < firstButtonMaxX && y<firstButtonMaxY)
            {
                @if(!Model.LevelsCompleted.Levels[0].Locked)
                        {
                            @:window.location.href = '@Url.Action("Index","Home",new{level = 1})';
                                        }
            }
            if(x > secondButtonMinX && x < secondButtonMaxX &&  y<firstButtonMaxY)
            {
                @if(!Model.LevelsCompleted.Levels[1].Locked)
                        {
                            @:window.location.href = '@Url.Action("Index","Home",new{level = 2})';
                                        }
            }
            if(x > thirdButtonMinX && x < thirdButtonMaxX &&  y<firstButtonMaxY)
            {
                @if(!Model.LevelsCompleted.Levels[2].Locked)
                {
                    @:window.location.href = '@Url.Action("Index","Home",new{level = 3})';
                }
            }
        }
        if(x>fourthButtonMinX && x<thirdButtonMaxX &&  y > fourthButtonMinY && y < fourthButtonMaxY)
        {
            if(x>fourthButtonMinX && x<fourthButtonMaxX)
            {
                @if(!Model.LevelsCompleted.Levels[3].Locked)
                {
                    @:window.location.href = '@Url.Action("Index","Home",new{level = 4})';
                }
            }
            if(x>fifthButtonMinX && x<fifthButtonMaxX)
            {
                @if(!Model.LevelsCompleted.Levels[4].Locked)
                {
                    @:window.location.href = '@Url.Action("Index","Home",new{level = 5})';
                }
            }
            if(x>sixthButtonMinX && x<sixthButtonMaxX)
            {
                @if(!Model.LevelsCompleted.Levels[5].Locked)
                {
                    @:window.location.href = '@Url.Action("Index","Home",new{level = 6})';
                }
            }
        }
        if(x>seventhButtonMinX && x<ninthButtonMaxX && y >seventhButtonMinY && y<seventhButtonMaxY)
        {
            if(x>seventhButtonMinX && x<seventhButtonMaxX)
            {
                @if(!Model.LevelsCompleted.Levels[6].Locked)
                {
                    @:window.location.href = '@Url.Action("Index","Home",new{level = 7})';
                }
            }
            if(x>eighthButtonMinX && x<eighthButtonMaxX)
            {
                @if(!Model.LevelsCompleted.Levels[7].Locked)
                {
                    @:window.location.href = '@Url.Action("Index","Home",new{level = 8})';
                }
            }
            if(x>ninthButtonMinX && x<ninthButtonMaxX)
            {
                @if(!Model.LevelsCompleted.Levels[8].Locked)
                {
                    @:window.location.href = '@Url.Action("Index","Home",new{level = 9})';
                }
            }
        }

    }

    </script>
    }
    <canvas id="canvas">
        HTML5 Canvas not supported.
    </canvas>
    <table id="hpEntry">
    <tr>
        <td>@Html.LabelFor(m => m.HPGuess)</td>
        <td>@Html.TextBoxFor(m => m.HPGuess)</td>
    </tr>
        @if(Model.Level >6)
        { 
            <tr>
                <td>@Html.Label("NPSHGuess","NPSH:")</td>
                <td>@Html.TextBox("NPSHGuess","")</td>
            </tr>
        }
        @if (Model.Level > 7)
        {
            <tr>
                <td>@Html.Label("PumpType","Pump Type:")</td>
                <td>@Html.DropDownListFor(m => m.PumpType, new SelectList(Model.PumpTypes, "Key", "Value"), new { size = 1})</td>
            </tr>
        }
        @if (Model.Level > 8)
        {
            <tr>
                <td>@Html.Label("CostGuess", "Cost:")</td>
                <td>@Html.TextBox("CostGuess", "")</td>
            </tr>
        }
</table>
    <menu id="controls">
    <table >
        <tr>
            <td><input type="submit" id="submitButton" value="Submit Answer" style="font-size:xx-small; width:100%;" onclick="submitPage()" /></td>
            <td><input type="submit" id="returnButton" value="Level Select" style="font-size:xx-small; width:100%;" onclick="levelselectPage()" /></td>
        </tr>
        <tr style="padding-top:3%;">
            <td><input type="submit" id="equationsButton" value="Show Equations/Tables" style="font-size:xx-small; width:100%;" onclick="openEquations()"></td>
            <td><input type="submit" id="logoutButton" value="Log Out" style="font-size:xx-small; width:100%;" onclick="logOut()" /></td>
        </tr>
    </table>
</menu>
<div id="fix">&copy; @DateTime.Now.Year - Pumps101</div>
@Html.HiddenFor(m => m.LevelId)
@Html.Hidden("redirect", Url.Action("Index", "Home", new { level = 0 }))
<div id="gameresult">
    <div class="centeredtext">
        <div id="response">
        </div>
    </div>
</div>